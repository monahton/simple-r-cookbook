[["index.html", "A Simple R Cookbook for Wet Lab Biologists 1 Welcome 1.1 Why This Book? 1.2 Who Should Read This Book? 1.3 What You Will Learn 1.4 What This Book Is Not 1.5 Citation", " A Simple R Cookbook for Wet Lab Biologists Monah Abou Alezz 2025-07-03 1 Welcome Welcome to A Simple R Cookbook for Wet Lab Biologists. This is a hands-on, low-stress, high-impact guide to data analysis for researchers who spend more time at the bench than behind a keyboard. We get it: you’re busy pipetting, optimizing qPCRs, decoding cryptic Western blots that resemble a Rorschach test, and navigating Excel spreadsheets that look more like digital Jenga than data. Learning to code might feel intimidating, time-consuming, or just not for you. That’s exactly why this book exists. This cookbook gently walks you through using R, a powerful, free, open-source language that’s basically the Swiss army knife of data analysis. You’ll learn how to: Import and tidy up messy experimental data Create stunning, publication-quality plots Run basic statistics with confidence Write reproducible scripts that save you from “Spreadsheet Hell” If you can troubleshoot your PCR with Google, you can learn R. And this book will show you how — one clear recipe at a time. 1.1 Why This Book? As a wet lab biologist, you’re already generating valuable data from qPCRs, Western blots, RNA-seq, ELISAs, microscopy, and more. But analyzing and presenting that data should not mean fighting with Excel or running outdated SPSS scripts. R empowers you to: Clean and reshape your data with precision Perform statistical tests and visualize results Automate repetitive tasks Keep your analyses reproducible and transparent This cookbook is designed to give you just enough R to be independent — in the best possible way. 1.2 Who Should Read This Book? This book is for:  Biologists who’ve never coded before (and aren’t sure they want to)  Researchers tired of copy-pasting into Excel  Graduate students doing data-heavy projects  Lab technicians and PIs looking to modernize their workflows  Anyone who wants to understand what ggplot2 is (and why it’s not a sequel) You don’t need a background in programming, math, or stats; just curiosity and a willingness to try. 1.3 What You Will Learn By the end of this book, you’ll be able to: Speak fluent data.frame (or at least understand what one is) Import your experimental data like a pro (no more drag-and-drop chaos) Clean up messy spreadsheets without crying Make beautiful plots with ggplot2 that your PI will actually like Run basic statistical tests without copying formulas from a forgotten textbook Write simple scripts that do your dirty work for you (reproducibly!) Think of this as your R lab manual — but way more helpful and a lot less dry. 1.4 What This Book Is Not This is not: A deep dive into computer science, data engineering, or machine learning A comprehensive stats textbook (no scary formulas here, promise!) A book that assumes you’ve ever written code before Going to teach you how to build a neural network to predict the future of your PCR Instead, it’s a practical, real-life-friendly guide for people who just want to analyze their data without losing their minds. If you’ve ever: Spent 3 hours manually formatting an Excel file Googled “how to calculate SEM in Excel” for the 10th time Cried because your plot labels wouldn’t fit …you’re in the right place!! 1.5 Citation If you found this cookbook useful in your work or teaching, please cite it as: Abou Alezz, M. (2025). A Simple R Cookbook for Wet Lab Biologists. https://github.com/monahton/simple-r-cookbook "],["appendices.html", "2 Appendices", " 2 Appendices Content coming soon. "],["bioinformatics.html", "3 Bioinformatics", " 3 Bioinformatics Content coming soon. "],["data-import.html", "4 Data Import 4.1 Meet Your New Favorite Dataset 4.2 Load the Tidyverse First 4.3 Importing the Dataset", " 4 Data Import Let’s face it — getting your data into R is half the battle. Once it’s in, the magic begins. In this section, we’ll walk through how to import real experimental data using the tidyverse package. And good news: we’re going to use a dataset that mimics real-life biological experiments specifically designed for this book. No more pretending your experiments look like iris flowers. 4.1 Meet Your New Favorite Dataset We’ll be using a dataset that mimics real-life biological experiments — multiple treatments, time points, and measurements like gene expression, blood pressure, and drug response. You can download it using this link. This dataset originates from a multi-center longitudinal clinical study designed to evaluate the response of 1,200 cancer patients to three experimental drugs: Drug A, Drug B, and Drug C across five cancer types: lung, breast, colon, prostate, and melanoma. Patients were recruited from 10 different hospitals and followed over six timepoints spanning 12 weeks, with multiple technical replicates per sample. The dataset includes patient demographics (age, sex), clinical site information, treatment group, disease type, response status (responder vs. non-responder), longitudinal measurements of two simulated biomarkers, blood pressure, drug dosage, and gene expression levels of two genes. The study’s scope is to investigate how these biomarkers and gene expression profiles change over time in relation to drug treatment, dosage, patient characteristics, and clinical response, providing a rich resource for exploring treatment efficacy, molecular correlates of response, and demographic or center-specific effects. 4.1.1  Column Descriptions Column Description PatientID Unique ID for each patient (e.g., “P000123”). Used to track repeated measurements. Center Clinical site where the patient was enrolled. Used to explore hospital-level variability. Age Age of the patient in years. Allows age-based subgroup analysis. Sex Biological sex (“Male” or “Female”). May affect treatment response. Group Drug group assigned to the patient: “Drug A”, “Drug B”, or “Drug C”. DiseaseType Type of cancer: “Lung”, “Breast”, “Colon”, “Prostate”, or “Melanoma”. ResponseStatus Final outcome: “Responder” or “Non-responder” after 12 weeks of treatment. Timepoint When the sample was collected: “Baseline”, “Week1”, …, “Week12”. Biomarker1 Simulated concentration of a protein biomarker (e.g., CRP). Biomarker2 Simulated concentration of a cytokine (e.g., IL-6). Replicate Technical replicate ID (1–5 per patient-timepoint). BloodPressure Systolic blood pressure in mmHg. Influenced by age and possibly treatment. Dosage_mg Dose of the drug in milligrams. Varies by group and timepoint. GeneX_expr Expression of Gene X (log2 scale). Higher in responders. GeneY_expr Expression of Gene Y (log2 scale). Higher in Lung cancer patients. We’ll use this dataset in most of the examples throughout the book, so feel free to open it in a spreadsheet program to peek at it before we load it. 4.2 Load the Tidyverse First Before we can import the data, we need to load the package that gives us friendly tools to work with data: the tidyverse. If you don’t have it installed yet, you can do that with: install.packages(&quot;tidyverse&quot;) After the installation is complete, load the tidyverse package: library(tidyverse)  The tidyverse is an umbrella package (i.e a package containing several other packages). It includes readr for reading CSV files, dplyr for data wrangling, and ggplot2 for plotting in addition to a full toolkit for modern R data science. 4.3 Importing the Dataset To import the dataset, we’ll use the read_csv() function from the readr package (part of the tidyverse). It’s faster and cleaner than the base R read.csv() function. # Load the dataset bio_data &lt;- read_csv(&quot;data/clean_bioexperiment.csv&quot;) # Peek at it glimpse(bio_data) Common Gotchas: - File not found? Make sure you’re working in the right project. Open the .Rproj file before you start coding! - Wrong slashes? Always use forward slashes / in file paths — even on Windows. - Excel file? We’ll cover .xlsx files later using readxl::read_excel() — for now we’re sticking with .csv for simplicity. "],["data-wrangling.html", "5 Data Wrangling", " 5 Data Wrangling Content coming soon. "],["getting-started.html", "6 Getting Started 6.1 Navigating RStudio Like a Pro (or at Least Like You’ve Used It Before) 6.2 Getting Set Up: Creating a Project 6.3 Organizing Your Project Directory 6.4 Console vs Script: What’s the Difference?", " 6 Getting Started 6.1 Navigating RStudio Like a Pro (or at Least Like You’ve Used It Before) When you first open RStudio, you might feel like you’ve accidentally launched a spaceship dashboard. Don’t worry — you’re not alone. Let’s break it down: RStudio is typically divided into four panes: Console (bottom left): This is where R does the talking. You type code here, R runs it, and outputs appear right away. Source (top left): This is where you write and save scripts (.R files, .Rmd files, etc.). Think of it as your lab notebook — but smarter and less likely to get coffee-stained. Environment/History (top right): Here you’ll see all the variables and objects you’ve created (like your tidy data frames or test results), and a history of commands you’ve run. Files/Plots/Packages/Help/Viewer (bottom right): A multitool: browse your files, view plots, install packages, read help files, and more. It’s like the utility belt for your R lab work. If something disappears, don’t panic. Go to View &gt; Panes and bring it back. 6.2 Getting Set Up: Creating a Project Before writing any code, you’ll want to create an RStudio Project. Why? Because: - It helps R keep track of your files - It keeps your working directory consistent (no more mystery paths) - It makes collaboration easier - It gives you peace of mind 6.2.1 To create a new project: Go to File &gt; New Project Choose New Directory Pick Book project using bookdown (if you’re writing this book) Give your project a name (e.g., simple-r-cookbook) Choose a location for it Click Create Project  Pro tip: Your project will have a file ending in .Rproj — this is your golden ticket. Always open this file to launch your project. 6.3 Organizing Your Project Directory A little structure goes a long way — especially when your files start multiplying like bacteria in rich media. Here’s a recommended layout: simple-r-cookbook/ ├── data/ # Raw and cleaned datasets (CSV, XLSX, etc.) ├── figures/ # Plots, diagrams, and exported images ├── scripts/ # R scripts you write (optional if using bookdown) ├── output # results from the various analyses ├── docs # additional log files, papers, …etc  Keep things tidy. If you’ve ever opened a folder called “final_final_correct_version2.xlsx”, you already know why. 6.4 Console vs Script: What’s the Difference? In RStudio, you can write R code in two places: The Console is for quick one-off commands. It’s like talking to R in real time. Example: 2 + 2 or getwd() The Script editor is where you write and save full workflows or analyses. It’s like your digital lab notebook that doesn’t forget things. Here’s why you should use scripts as much as possible: - You can save your code and come back to it later - You can re-run everything with one click (or Ctrl + Shift + Enter) - You can annotate your code with comments (starting with #) to explain what you’re doing (and why) - You can avoid repeating yourself Console = Post-it note Script = Protocol in your lab notebook Both have their place, but your future self will thank you for using scripts. Ready to run your first bit of code? Try this in your console: message(&quot;Hello, biologist! You’re now officially coding.&quot;) ## Hello, biologist! You’re now officially coding. "],["introduction.html", "7 Introduction 7.1 A Little History won’t hurt… 7.2 Why Use R? 7.3 R for Bioinformatics? Yes, Please! 7.4 What’s RStudio and How Is It Different from R?", " 7 Introduction 7.1 A Little History won’t hurt… R is a statistical programming language. The name R comes from the first letters of its creators’ names: Ross Ihaka and Robert Gentleman, who developed R in the early 1990s at the University of Auckland in New Zealand. It’s also a cheeky nod to the S programming language, which came before it.  So: R = Robert + Ross …and a respectful hat tip to S, its parent language. S was originally developed at Bell Labs in the 1970s for statistical computing. While S went commercial (in products like S-PLUS), R stayed true to its academic and open-source roots. And today? R has taken over the world of data science, statistics, and bioinformatics. 7.2 Why Use R? Still wondering why you should learn R instead of just sticking with Excel or some point-and-click software? Here’s what makes R an absolute game-changer especially for wet lab scientists: - 1. R Can Handle Much Larger Datasets While Excel starts crashing at ~1 million rows, R just stretches and says, “Cool, what’s next?” With efficient data structures and memory management, R can comfortably handle large-scale datasets. Think of gene expression matrices, proteomics tables, or high-throughput screening results. -  2. R Is Scriptable = Reproducible Every click in Excel is a mystery. Every line in R is a documented, reproducible step. You can rerun your entire analysis with a single script — no more “I have no idea how I made this figure.” -  3. R Is Open Source! That’s right, it is totally free! No license fees, no paywalls, no trials. Just install it and go. You can also install thousands of R packages without needing a university budget or a support contract. -  4. R Works Everywhere R runs on Windows, Mac, Linux, and even the cloud if for some reason you do not want to install it on your device. You can also write your code on a laptop and run it later on a cluster, server, or cloud-based platform like RStudio Cloud or Binder. -  5. R Is Everywhere in Science R is used by academic labs, pharma companies, bioinformatics cores, government agencies, and more. If there’s a paper with a volcano plot in it, odds are someone used R. -  6. R Has an Active Community There are thousands of developers and contributors constantly improving R. Need a new tool? Someone’s probably already written a package for it. If not, you can write one yourself and become internet-famous (kind of). 7.3 R for Bioinformatics? Yes, Please! R isn’t just for plotting bar charts or fitting linear models; it’s a major powerhouse in bioinformatics. R has packages for: RNA-seq (e.g., DESeq2, edgeR, limma) Single-cell analysis (Seurat, scran, monocle) Variant analysis (VariantAnnotation, vcfR) Functional enrichment (clusterProfiler, topGO) Visualization (ggplot2, ComplexHeatmap, pheatmap) And everything in between It’s integrated into pipelines and workflows used by researchers around the world — from core facilities to biotech startups to big pharma. TL;DR: If your data ends in “-seq”, you probably need R. 7.4 What’s RStudio and How Is It Different from R? That’s a great question! You have probably heard before people using the terms R and RStudio interchangeably. While they are related and most of the time ( more or less ) referring to the same thing, they are not quietly the same: R is the programming language itself. It is what runs the different functions and make the analyses. RStudio is an integrated development environment (IDE) that makes using R easier. In simple English, it is an interface that shows you buttons, panels, a file explorer, syntax highlighting, plots that appear like magic, and even a built-in terminal. To make the difference clear, here’s an analogy: ️ R = the engine of a car. It’s powerful, but not super user-friendly on its own.  RStudio = the car’s entire dashboard and steering wheel You could technically drive the engine alone, but it’s going to be a wild ride. Use RStudio, and you get a much smoother experience. RStudio also: Helps you manage projects and scripts Shows plots, tables, and files in one place Makes debugging and coding much easier Works beautifully with bookdown (like this book!) "],["rmarkdown.html", "8 Rmarkdown", " 8 Rmarkdown Content coming soon. "],["statistics.html", "9 Statistics", " 9 Statistics Content coming soon. "],["troubleshooting.html", "10 Troubleshooting", " 10 Troubleshooting Content coming soon. "],["visualization.html", "11 Visualization", " 11 Visualization Content coming soon. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
